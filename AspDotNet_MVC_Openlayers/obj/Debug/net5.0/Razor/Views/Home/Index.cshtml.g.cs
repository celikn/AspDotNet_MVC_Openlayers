#pragma checksum "E:\PersonalGitRepo\OpenLayer_AspDotNet_MVC\OpenLayer\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a8f7b665aa1a8bbf1f3038f449b6967e49688081"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\PersonalGitRepo\OpenLayer_AspDotNet_MVC\OpenLayer\Views\_ViewImports.cshtml"
using OpenLayer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\PersonalGitRepo\OpenLayer_AspDotNet_MVC\OpenLayer\Views\_ViewImports.cshtml"
using OpenLayer.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a8f7b665aa1a8bbf1f3038f449b6967e49688081", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"97affb0656334b33dbb587856c42c2039a1786be", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<link rel=""stylesheet"" href=""https://openlayers.org/en/v6.3.1/css/ol.css"" type=""text/css"">

<script src=""https://openlayers.org/en/v6.3.1/build/ol.js""></script>

<script src=""https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.1/proj4.js""></script>

<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js""></script>

<!-- ol-layerswitcher -->
<script src=""https://unpkg.com/ol-layerswitcher@3.5.0""></script>

<link rel=""stylesheet"" href=""https://unpkg.com/ol-layerswitcher@3.5.0/src/ol-layerswitcher.css"" />

<link href=""https://unpkg.com/ol-geocoder/dist/ol-geocoder.min.css"" rel=""stylesheet"">

<script src=""https://unpkg.com/ol-geocoder""></script>
<script");
            BeginWriteAttribute("src", " src=\'", 695, "\'", 743, 2);
            WriteAttributeValue("", 701, "https://npmcdn.com/", 701, 19, true);
            WriteLiteral("@");
            WriteAttributeValue("", 722, "turf/turf/turf.min.js", 722, 21, true);
            EndWriteAttribute();
            WriteLiteral(@"></script>




<div>
    <div id=""map"" class=""map"" style=""height:550px; width:100%"">
    </div>
</div>
<script>

      var bingKey = ""Amun7V-poQFMddIL8XyBvcWmdNNM6GIr7AOFa2tLi_0XJUyD-OBxFedjdoj6CWQj"";  // big key eklemeyi unutma .)

      // Map initialization
      var map = new ol.Map({
        layers: [
          new ol.layer.Tile({
            source: new ol.source.OSM()
          })
        ],

        target: 'map',

        view: new ol.View({
          center: [0, 0],
          zoom: 2
        })
      });

      // Base layer group for map
      var basedGroup = new ol.layer.Group({
        // A layer must have a title to appear in the layerswitcher
        title: 'Base maps',
        layers: [
          new ol.layer.Tile({
            title: 'OSM',
            type: 'base',
            visible: true,
            source: new ol.source.OSM()
          }),
          new ol.layer.Tile({
            title: 'BingMap',
            type: 'base',
            preload");
            WriteLiteral(@": Infinity,
            source: new ol.source.BingMaps({
              key: bingKey,
              imagerySet: 'Aerial'

            }),
          }),
        ]
      })

      var overLayesGroup = new ol.layer.Group({
        // A layer must have a title to appear in the layerswitcher
        title: 'Overlays',
        // Adding a 'fold' property set to either 'open' or 'close' makes the group layer
        // collapsible
        fold: 'open',
        layers: []
      })

      map.addLayer(basedGroup)
      //map.addLayer(overLayesGroup)


      // Layer Switcher initialization
      var layerSwitcher = new ol.control.LayerSwitcher({
        tipLabel: 'Legand', // Optional label for button
        groupSelectStyle: 'children' // Can be 'children' [default], 'group' or 'none'
      });
      map.addControl(layerSwitcher);
      layerSwitcher.showPanel();





      // -----------------------------Layers for--------------------------
      // Add Group Layer for Adana
    ");
            WriteLiteral(@"  var dataGroup = new ol.layer.Group({
        layers: [],
        title: ' Veri KatmanlarÄ±',
      });

      map.addLayer(dataGroup);





      var extent = map.getView().calculateExtent();
      var extent4326 = ol.proj.transformExtent(extent, 'EPSG:3857', 'EPSG:4326');

      var points = turf.random.randomPoint(10000, {
                  bbox: extent4326
      });


    var vectorSource = new ol.source.Vector({
     
    });

    var vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        title:""Points""
    });


     let format = new ol.format.GeoJSON({
            featureProjection:""EPSG:3857"",
     });
     
     vectorLayer.getSource().addFeatures(format.readFeatures(points)); // Don't needed to parse here

     dataGroup.getLayers().push(vectorLayer);


     layerSwitcher.renderPanel()




</script>

<style>

    .map .ol-custom-overviewmap,
    .map .ol-custom-overviewmap.ol-uncollapsible {
        bottom: 0;
        left: auto;
");
            WriteLiteral("        right: 0;\r\n        top: auto;\r\n    }\r\n\r\n    td {\r\n        border-top: 1px solid #000000;\r\n        border-bottom: 1px solid #000000;\r\n        border-left: 1px solid #000000;\r\n        border-right: 1px solid #000000\r\n    }\r\n\r\n</style>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
